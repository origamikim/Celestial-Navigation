#!/usr/bin/env python
# coding: utf-8

# In[54]:


#Modules
import math as m
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import time
def sin(val):
    return m.sin(val)
def cos(val):
    return m.cos(val)
def tan(val):
    return m.tan(val)
def deg(val):
    return np.degrees(val)
def rad(val):
    return np.radians(val)

def minutes(hour):
    if type(hour)==int or float:
        modifiedRA=60*hour
    
    elif type(hour)==str:
        val=hour[0:6]
        val=val.split('h ')
        modifiedRA=(int(val[0])+int(val[1]))*60
    return modifiedRA

def hours(minutes):
    Hours=minutes//60
    Minutes=float('%.2f'%(minutes/60-Hours))
    return Hours+Minutes

def hour_min(hours): #ab.cd시=> 출력시 사용 ; Hh:Mm
    Minutes=minutes(hours)
    H=int(Minutes//60)
    M=int((Minutes%60))
    return(str(H)+':'+str(M))


# In[69]:


#Observation Environment Setting()
longitude=126.97
latitude=37.5
timezone=longitude//15+1
lat=rad(latitude)
Ts=time.localtime(time.time())


# In[ ]:


# Modify Dates, Declination, Right Ascension
Month=month-3
if Month <0:
    Month +=12
monthly_date=[0,31,61,92,122,153,184,214,245,275,306,337]
Sun_date=monthly_date[Month]+date-20
Sun_hour=hour-13
if Sun_hour<0:
    Sun_date += -1
    Sun_hour += 24
if Sun_date<0:
    Sun_date += 365
    


# In[71]:


# Solar Information
def solar_information(d=day_of_year,print_out=True):
    global decl
    global ha
    global sun_altitude
    global sun_azimuth
    global sunrise_time
    global sunset_time
    global solar_noon
    global sunrise_azimuth
    global sunset_azimuth
    global solar_as
    solar_as=hours(1440/365*(Sun_date+Sun_hour/24+minute/1440))
    if solar_as==24:
        solar_as=0
    r=2*m.pi/365*(d-1+(hour-12)) #fractional year / radian
    eqtime=229.18*(0.000075+0.001868*m.cos(r)-0.032077*m.sin(r)
                   -0.014615*m.cos(2*r)-0.040849*m.sin(2*r)) #equation_of_time /minute
    #decl=(0.006918-0.399912*m.cos(r)-0.070257*m.sin(r)-0.006758*m.cos(2*r)
     #     +0.000907*sin(2*r)-0.002697*m.cos(3*r)+0.00148*m.sin(3*r)) #radian
    decl=-m.asin(0.39779*cos(rad(0.98585*(d+10)+1.914*sin(rad(0.98585*(d-2))))))
    time_offset=eqtime+4*longitude-60*timezone #minute
    
    tst=hour*60+minute+second/60+time_offset #minute
    
    ha=(tst/4)-180 #degree

    rise_ha=deg(m.acos(m.cos(rad(90.833))/(m.cos(lat)*m.cos(decl))
                  -m.tan(lat)*m.tan(decl)))
    set_ha=(360-rise_ha)
    UTCrise=720-4*(longitude+rise_ha)-eqtime
    UTCset=720-4*(longitude+set_ha)-eqtime
    sunrise_time=UTCrise/60+timezone
    sunset_time=UTCset/60+timezone+24

    UTCnoon=720-4*(longitude)-eqtime
    solar_noon=UTCnoon/60+timezone
    
    phi=m.acos(sin(lat)*sin(decl)+cos(lat)*cos(decl)*cos(rad(ha)))
    Phi=deg(phi)
    sun_altitude=90-Phi
    theta=deg(m.asin(-sin(rad(ha))*cos(decl)/sin(phi)))
    theta=180-theta
    if theta<0:
        theta += 360
    sun_azimuth=theta
    sunrise_azimuth=deg(m.acos(m.sin(decl)/m.cos(lat)))
    sunset_azimuth=360-sunrise_azimuth
    if print_out==True:
        print('Right Ascension: ''%.2f'%solar_as)
        print('Declination:''%.2f'%deg(decl))
        print('Altitude: ''%.2f'%(sun_altitude))
        print('Azimuth: ''%.2f'%sun_azimuth)
        print('Sunrise Time: '+hour_min(sunrise_time))
        print('Sunset Time: '+hour_min(sunset_time))
        print('Sunrise Azimuth:''%.2f'%sunrise_azimuth)
        print('Sunset Azimuth: ''%.2f'%sunset_azimuth)
        print('Solar Noon: '+hour_min(solar_noon))
solar_information()


# In[72]:


#Sunrise/Sunset Time/Azimuth Graph for a year
x=np.arange(0,365)
Trise=[]
Tset=[]
for i in x:
    solar_information(i,False)
    Trise.append(sunrise_time)
    Tset.append(sunset_time)
plt.figure(figsize=(15,7))
plt.xticks([81,174,266,357],['vernal_equinox','summer_solstice',
                             'autum_equinox','winter_solstice'])
plt.ylabel('Time')
plt.plot(x,Trise,linewidth=3,color='red')
plt.plot(x,Tset,linewidth=3,color='blue')
plt.title('Sunrise/Sunset Time for 2020')
plt.grid(True)
plt.show()

Arise=[]
Aset=[]
for i in x:
    solar_information(i,False)
    Arise.append(sunrise_azimuth)
    Aset.append(sunset_azimuth)

plt.figure(figsize=(15,7))
plt.xticks([81,174,266,357],['vernal_equinox','summer_solstice',
                             'autum_equinox','winter_solstice'])
plt.grid(True)
plt.ylabel('Azimuth')
plt.title('Sunrise/Sunset Azimuth for 2020')
plt.plot(x,Arise)
plt.plot(x,Aset)
plt.show()


# In[58]:


# Comparison with Actual Data in January
filename='1월 일출 일몰표.xlsx'
file=pd.ExcelFile(filename)
f=file.parse()
f[f['rise_min']==47]
TriseR=[]
TsetR=[]
for i in range(31):
    TriseR.append(hours(f.iloc[i][1]+7*60))
    TsetR.append(hours(f.iloc[i][3]+17*60))
x=np.arange(0,31)
Trise=Trise[0:31]
Tset=Tset[0:31]
plt.figure(figsize=(15,7))
plt.plot(x,Trise,linewidth=3,color='red')
plt.plot(x,Tset,linewidth=3,color='blue')
plt.plot(x,TriseR,marker='^',linestyle=':')
plt.plot(x,TsetR,marker='^',linestyle=':')
plt.ylabel('Time')
plt.title('Sunrise/Sunset Time in January 2020')
plt.grid(True)

plt.show()

Arise=[]
for i in range(365):
    solar_information(i,False)
    Arise.append(sunrise_azimuth)
AriseR=[]
for i in range(31):
    AriseR.append((f.iloc[i][4]))
x=np.arange(0,31)
Arise=Arise[0:31]
plt.figure(figsize=(15,7))
plt.plot(x,Arise,linewidth=3,color='red')
plt.plot(x,AriseR,marker='^',linestyle='none')
plt.ylabel('Azimuth')
plt.title('Sunrise/Sunset Azimuth in January 2020')
plt.grid(True)
plt.show()




